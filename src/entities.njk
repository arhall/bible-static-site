---
layout: base.njk
pagination:
  data: entityIds
  size: 1
  alias: entityId
permalink: '/entities/{{ entityId }}/'
---

<div class="entity-page" id="entityPage">
  <!-- Loading State -->
  <div class="entity-loading" id="entityLoading">
    <div class="loading-spinner"></div>
    <span>Loading entity...</span>
  </div>

  <!-- Main Content -->
  <div class="entity-content" id="entityContent" style="display: none">
    <!-- Header Section -->
    <div class="header">
      <div class="header-content">
        <div class="entity-title-group">
          <span class="entity-icon" id="entityIcon"></span>
          <h1 id="entityName"></h1>
        </div>
        <div class="entity-meta">
          <span class="badge entity-type-badge" id="entityType"></span>
          <span class="entity-source" id="entitySource"></span>
        </div>
      </div>
      <button class="bookmark-btn" onclick="bookmarkEntity()" title="Bookmark this entity">
        <span class="bookmark-icon" id="bookmarkIcon">‚òÜ</span>
        <span class="bookmark-text">Bookmark</span>
      </button>
    </div>

    <!-- Also Known As Section -->
    <div class="entity-aliases-section" id="entityAliases" style="display: none">
      <p class="meta"><strong>Also Known As:</strong> <span id="aliasesList"></span></p>
    </div>

    <!-- Description Section -->
    <div class="entity-description-section" id="entityDescription">
      <div class="entity-blurb" id="entityBlurb"></div>
    </div>

    <!-- Relationships Section -->
    <div class="entity-relations-section" id="entityRelations" style="display: none">
      <h3>Relationships</h3>
      <div class="relations-visualization" id="relationshipVisualization">
        <!-- Relationship visualizer will be inserted here -->
      </div>
      <details class="relations-details">
        <summary>View Detailed List</summary>
        <div class="relations-grid" id="relationsContent"></div>
      </details>
    </div>

    <!-- Scripture References Section -->
    <div class="entity-references-section">
      <div class="section-header">
        <h3>Scripture References</h3>
        <div class="section-controls">
          <div class="reference-filters">
            <select id="bookFilter" onchange="filterByBook()" class="book-filter-select">
              <option value="">All Books</option>
            </select>
            <div class="reference-stats" id="referenceStats"></div>
          </div>
        </div>
      </div>

      <div class="references-loading" id="referencesLoading" style="display: none">
        <div class="loading-spinner small"></div>
        <span>Loading references...</span>
      </div>

      <div class="references-content" id="referencesContent">
        <div class="references-grid" id="referencesList"></div>
      </div>
    </div>

    <!-- Cross References Section -->
    <div class="entity-cross-references-section" id="entityCrossRefs" style="display: none">
      <h3>Cross References</h3>
      <div class="cross-refs-grid" id="crossRefsList"></div>
    </div>

    <!-- Action Buttons -->
    <div class="entity-actions">
      <button
        id="shareEntity"
        class="btn-secondary"
        onclick="shareEntity()"
        title="Share this entity"
      >
        <span class="share-icon">‚ö°</span>
        Share Entity
      </button>
      <a href="/entities/" class="btn-primary"> View All Entities </a>
    </div>
  </div>

  <!-- Error State -->
  <div class="entity-error" id="entityError" style="display: none">
    <div class="error-container">
      <div class="error-icon">üîç</div>
      <h2>Entity Not Found</h2>
      <p>The requested entity could not be found or may have been moved.</p>
      <div class="error-actions">
        <a href="/entities/" class="btn-primary">Browse All Entities</a>
        <a href="/" class="btn-secondary">Return Home</a>
      </div>
    </div>
  </div>
</div>

<script>
  // Entity page functionality
  let currentEntity = null;
  let currentBookFilter = '';

  // Entity type icons
  const entityTypeIcons = {
    person: 'üë§',
    divine: '‚ú®',
    place: 'üìç',
    title: 'üëë',
    figure: 'üî∑',
    event: '‚ö°',
    group: 'üë•',
  };

  async function loadEntity() {
    const entityId = '{{ entityId }}';
    const loadingEl = document.getElementById('entityLoading');
    const contentEl = document.getElementById('entityContent');
    const errorEl = document.getElementById('entityError');

    try {
      loadingEl.style.display = 'flex';
      contentEl.style.display = 'none';
      errorEl.style.display = 'none';

      // Try to load entity data
      const response = await fetch(`/assets/data/entities/${entityId}.json`);
      if (!response.ok) {
        throw new Error(`Entity not found: ${entityId}`);
      }

      currentEntity = await response.json();
      displayEntity();
    } catch (error) {
      console.error('Error loading entity:', error);
      loadingEl.style.display = 'none';
      errorEl.style.display = 'block';

      if (window.logger) {
        window.logger.error('entity-load-error', error.message, {
          entityId: entityId,
          url: `/assets/data/entities/${entityId}.json`,
        });
      }

      // Try redirect resolution
      await tryRedirectResolution(entityId);
    }
  }

  async function tryRedirectResolution(originalId) {
    try {
      const redirectResponse = await fetch('/assets/data/redirects.json');
      if (redirectResponse.ok) {
        const redirects = await redirectResponse.json();
        const canonicalId = redirects[originalId];

        if (canonicalId && canonicalId !== originalId) {
          // Redirect to canonical URL
          window.location.replace(`/entities/${canonicalId}/`);
          return;
        }
      }
    } catch (error) {
      console.error('Error checking redirects:', error);
    }
  }

  function displayEntity() {
    if (!currentEntity) return;

    const loadingEl = document.getElementById('entityLoading');
    const contentEl = document.getElementById('entityContent');

    loadingEl.style.display = 'none';
    contentEl.style.display = 'block';

    // Set basic info
    document.getElementById('entityIcon').textContent = entityTypeIcons[currentEntity.type] || 'üìñ';
    document.getElementById('entityName').textContent = currentEntity.name;

    // Set type with proper formatting
    const typeEl = document.getElementById('entityType');
    const formattedType =
      (currentEntity.type || 'Unknown').charAt(0).toUpperCase() +
      (currentEntity.type || 'Unknown').slice(1);
    typeEl.textContent = formattedType;
    typeEl.className = `badge entity-type-badge entity-type-${currentEntity.type || 'unknown'}`;

    // Set source info
    if (currentEntity.source_testaments) {
      document.getElementById('entitySource').textContent =
        currentEntity.source_testaments.join(' ‚Ä¢ ');
    }

    // Display aliases if they exist
    if (currentEntity.canonicalized_from && currentEntity.canonicalized_from.length > 0) {
      const aliasesEl = document.getElementById('entityAliases');
      const aliasesListEl = document.getElementById('aliasesList');
      aliasesEl.style.display = 'block';
      aliasesListEl.textContent = currentEntity.canonicalized_from.join(', ');
    }

    // Display description
    if (currentEntity.blurb) {
      document.getElementById('entityBlurb').innerHTML = formatEntityText(currentEntity.blurb);
    } else {
      document.getElementById('entityBlurb').innerHTML =
        '<p class="muted">No description available for this entity.</p>';
    }

    // Display relationships
    if (currentEntity.relations && Object.keys(currentEntity.relations).length > 0) {
      displayRelations();
    }

    // Display references
    displayReferences();

    // Display cross references
    if (currentEntity.cross_references && currentEntity.cross_references.length > 0) {
      displayCrossReferences();
    }

    // Update page title and meta description for SEO
    document.title = `${currentEntity.name} - Explore Scripture`;

    // Update meta description dynamically
    const metaDescription = document.querySelector('meta[name="description"]');
    if (metaDescription && currentEntity.blurb) {
      const description =
        currentEntity.blurb.length > 160
          ? currentEntity.blurb.substring(0, 157) + '...'
          : currentEntity.blurb;
      metaDescription.setAttribute('content', `${currentEntity.name}: ${description}`);
    }

    // Update bookmark button state
    updateBookmarkButton();

    // Check for book filter from URL
    const urlParams = new URLSearchParams(window.location.search);
    const bookParam = urlParams.get('book');
    if (bookParam) {
      currentBookFilter = bookParam;
      const bookFilterSelect = document.getElementById('bookFilter');
      if (bookFilterSelect) {
        bookFilterSelect.value = bookParam;
      }
    }

    // Track page view
    if (window.telemetry) {
      window.telemetry.recordPageView(window.location.pathname, currentEntity.name, {
        entityType: currentEntity.type,
        entityId: currentEntity.id,
        bookFilter: currentBookFilter || 'none',
      });
    }
  }

  function displayRelations() {
    const relationsEl = document.getElementById('entityRelations');
    const relationsContentEl = document.getElementById('relationsContent');
    const vizContainer = document.getElementById('relationshipVisualization');

    if (!currentEntity.relations) return;

    // Create interactive visualization
    if (window.d3 && Object.keys(currentEntity.relations).length > 0) {
      const visualizer = new EntityRelationshipVisualizer('relationshipVisualization');
      visualizer.loadRelationships(currentEntity);
    } else if (Object.keys(currentEntity.relations).length === 0) {
      vizContainer.innerHTML = `
        <div class="relations-empty">
          <div class="empty-icon">üîó</div>
          <p>No relationships documented for this entity.</p>
        </div>
      `;
    } else {
      vizContainer.innerHTML = `
        <div class="relations-fallback">
          <div class="fallback-message">
            <p>üìä Interactive visualization not available. View details below.</p>
          </div>
        </div>
      `;
    }

    // Build detailed list (fallback and supplementary view)
    let relationsHtml = '';
    for (const [relationName, entities] of Object.entries(currentEntity.relations)) {
      const displayName = relationName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      relationsHtml += `
        <div class="relation-card">
          <h4 class="relation-title">${displayName}</h4>
          <div class="relation-items">
            ${entities
              .map(
                entity => `
              <span class="relation-tag">${entity}</span>
            `
              )
              .join('')}
          </div>
        </div>
      `;
    }

    relationsContentEl.innerHTML = relationsHtml;
    relationsEl.style.display = 'block';
  }

  function displayReferences() {
    if (!currentEntity.book_references) {
      populateBookFilter([]);
      return;
    }

    const books = Object.keys(currentEntity.book_references);
    populateBookFilter(books);

    updateReferenceDisplay();
  }

  function populateBookFilter(books) {
    const bookFilterSelect = document.getElementById('bookFilter');

    // Clear existing options except "All Books"
    while (bookFilterSelect.children.length > 1) {
      bookFilterSelect.removeChild(bookFilterSelect.lastChild);
    }

    // Add book options
    books.sort().forEach(book => {
      const option = document.createElement('option');
      option.value = book;
      option.textContent = book;
      bookFilterSelect.appendChild(option);
    });
  }

  function updateReferenceDisplay() {
    const referencesListEl = document.getElementById('referencesList');
    const referenceStatsEl = document.getElementById('referenceStats');

    if (!currentEntity.book_references) {
      referencesListEl.innerHTML = '<p class="no-references">No references found.</p>';
      referenceStatsEl.textContent = '';
      return;
    }

    let displayBooks = Object.entries(currentEntity.book_references);

    // Filter by book if selected
    if (currentBookFilter) {
      displayBooks = displayBooks.filter(([book]) => book === currentBookFilter);
    }

    // Calculate stats
    const totalReferences = displayBooks.reduce((sum, [, chapters]) => sum + chapters.length, 0);
    const bookCount = displayBooks.length;

    referenceStatsEl.textContent = currentBookFilter
      ? `${totalReferences} references in ${currentBookFilter}`
      : `${totalReferences} references across ${bookCount} books`;

    // Display references grouped by book
    const referencesHtml = displayBooks
      .map(([bookName, chapters]) => {
        const bookSlug = bookName.toLowerCase().replace(/\s+/g, '-');
        return `
        <div class="reference-book-card">
          <div class="book-header">
            <h4 class="book-title">
              <a href="/books/${bookSlug}/" class="book-link">${bookName}</a>
            </h4>
            <span class="chapter-count badge">${chapters.length} chapter${chapters.length !== 1 ? 's' : ''}</span>
          </div>
          <div class="chapter-references">
            ${chapters
              .sort((a, b) => parseInt(a) - parseInt(b))
              .map(
                chapterNum => `
              <a href="/books/${bookSlug}/#chapter-${chapterNum}" class="chapter-btn" 
                 onclick="trackReferenceClick('${bookSlug}', ${chapterNum})"
                 title="View ${bookName} Chapter ${chapterNum}">
                ${chapterNum}
              </a>
            `
              )
              .join('')}
          </div>
        </div>
      `;
      })
      .join('');

    referencesListEl.innerHTML =
      referencesHtml || '<p class="no-references">No matching references found.</p>';
  }

  function displayCrossReferences() {
    const crossRefsEl = document.getElementById('entityCrossRefs');
    const crossRefsListEl = document.getElementById('crossRefsList');

    if (!currentEntity.cross_references || currentEntity.cross_references.length === 0) {
      return;
    }

    const crossRefsHtml = currentEntity.cross_references
      .map(
        ref => `
      <div class="cross-ref-card">
        <a href="/scripture/${ref}" class="cross-ref-link" onclick="trackCrossRefClick('${ref}')">
          <span class="scripture-icon">üìñ</span>
          <span class="scripture-text">${ref}</span>
        </a>
      </div>
    `
      )
      .join('');

    crossRefsListEl.innerHTML = crossRefsHtml;
    crossRefsEl.style.display = 'block';
  }

  function filterByBook() {
    const bookFilterSelect = document.getElementById('bookFilter');
    currentBookFilter = bookFilterSelect.value;

    // Update URL without page reload
    const url = new URL(window.location);
    if (currentBookFilter) {
      url.searchParams.set('book', currentBookFilter);
    } else {
      url.searchParams.delete('book');
    }
    window.history.replaceState({}, '', url);

    updateReferenceDisplay();

    // Track filtering
    if (window.telemetry) {
      window.telemetry.recordUserAction('entity-filter-book', currentBookFilter || 'all', {
        entityId: currentEntity.id,
        entityName: currentEntity.name,
      });
    }
  }

  function formatEntityText(text) {
    // Basic text formatting - could be enhanced
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/\n/g, '<br>');
  }

  function shareEntity() {
    if (navigator.share && currentEntity) {
      navigator.share({
        title: `${currentEntity.name} - Explore Scripture`,
        text: currentEntity.blurb
          ? currentEntity.blurb.substring(0, 200) + '...'
          : `Learn about ${currentEntity.name} in the Bible`,
        url: window.location.href,
      });
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(window.location.href).then(() => {
        alert('Link copied to clipboard!');
      });
    }

    if (window.telemetry) {
      window.telemetry.recordUserAction('entity-share', currentEntity.id, {
        entityName: currentEntity.name,
        method: navigator.share ? 'native' : 'clipboard',
      });
    }
  }

  function updateBookmarkButton() {
    if (!currentEntity) return;

    const isCurrentlyBookmarked = isBookmarked && isBookmarked(window.location.pathname);
    const bookmarkIcon = document.getElementById('bookmarkIcon');
    const bookmarkBtn = document.querySelector('.bookmark-btn');

    if (bookmarkIcon) {
      bookmarkIcon.textContent = isCurrentlyBookmarked ? '‚òÖ' : '‚òÜ';
    }

    if (bookmarkBtn) {
      bookmarkBtn.setAttribute(
        'aria-label',
        isCurrentlyBookmarked ? 'Remove bookmark' : 'Add bookmark'
      );
    }
  }

  function bookmarkEntity() {
    if (!currentEntity) return;

    const pageData = {
      url: window.location.pathname,
      type: 'entity',
      title: currentEntity.name,
      category: currentEntity.type,
      description: currentEntity.blurb ? currentEntity.blurb.substring(0, 100) : '',
    };

    const isNowBookmarked = toggleBookmark ? toggleBookmark(pageData) : false;

    // Update button state
    const bookmarkIcon = document.getElementById('bookmarkIcon');
    const bookmarkBtn = document.querySelector('.bookmark-btn');

    if (bookmarkIcon) {
      bookmarkIcon.textContent = isNowBookmarked ? '‚òÖ' : '‚òÜ';
    }

    if (bookmarkBtn) {
      bookmarkBtn.setAttribute('aria-label', isNowBookmarked ? 'Remove bookmark' : 'Add bookmark');
    }

    // Show feedback animation
    if (bookmarkBtn) {
      bookmarkBtn.style.transform = 'scale(0.95)';
      setTimeout(() => {
        bookmarkBtn.style.transform = 'scale(1)';
      }, 150);
    }

    // Track action
    if (window.telemetry) {
      window.telemetry.recordUserAction(
        'entity-bookmark-toggle',
        isNowBookmarked ? 'add' : 'remove',
        {
          entityId: currentEntity.id,
          entityName: currentEntity.name,
        }
      );
    }
  }

  function trackReferenceClick(bookSlug, chapterNum) {
    if (window.telemetry) {
      window.telemetry.recordNavigation(
        'entity-reference-click',
        `/books/${bookSlug}/#chapter-${chapterNum}`,
        {
          entityId: currentEntity.id,
          entityName: currentEntity.name,
          book: bookSlug,
          chapter: chapterNum,
        }
      );
    }
  }

  function trackCrossRefClick(reference) {
    if (window.telemetry) {
      window.telemetry.recordNavigation('entity-cross-ref-click', `/scripture/${reference}`, {
        entityId: currentEntity.id,
        entityName: currentEntity.name,
        reference: reference,
      });
    }
  }

  // Initialize entity page
  document.addEventListener('DOMContentLoaded', function () {
    loadEntity();

    // Update bookmark button state if entity loads
    setTimeout(() => {
      if (currentEntity) {
        updateBookmarkButton(isBookmarked(window.location.pathname));
      }
    }, 1000);
  });
</script>

<!-- Load D3.js for relationship visualization -->
<script src="https://unpkg.com/d3@7/dist/d3.min.js"></script>
<!-- Load Entity Relationship Visualizer -->
<script src="/assets/entity-relationship-visualizer.js"></script>

<style>
  /* Entity relationship visualization styles */
  .relations-details {
    margin-top: 1rem;
  }

  .relations-details summary {
    cursor: pointer;
    font-weight: 600;
    color: var(--accent, #2563eb);
    padding: 0.5rem 0;
    list-style: none;
  }

  .relations-details summary::-webkit-details-marker {
    display: none;
  }

  .relations-details summary:before {
    content: '‚ñ∂';
    margin-right: 0.5rem;
    transition: transform 0.2s ease;
  }

  .relations-details[open] summary:before {
    transform: rotate(90deg);
  }

  .relations-empty,
  .relations-fallback {
    text-align: center;
    padding: 2rem;
    color: var(--text-secondary, #6b7280);
    background: var(--bg-secondary, #f8fafc);
    border-radius: 8px;
    border: 1px solid var(--border, #e5e7eb);
  }

  .relations-empty .empty-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .fallback-message {
    font-style: italic;
  }
</style>
